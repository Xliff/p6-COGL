use v6.c;

use GLib::Raw::Definitions;

unit package COGL::Raw::Enums;

constant CoglAttributeType is export := guint32;
our enum CoglAttributeTypeEnum is export (
  COGL_ATTRIBUTE_TYPE_BYTE           => 0x1400,
  COGL_ATTRIBUTE_TYPE_UNSIGNED_BYTE  => 0x1401,
  COGL_ATTRIBUTE_TYPE_SHORT          => 0x1402,
  COGL_ATTRIBUTE_TYPE_UNSIGNED_SHORT => 0x1403,
  COGL_ATTRIBUTE_TYPE_FLOAT          => 0x1406,
);

constant CoglBitmapError is export := guint32;
our enum CoglBitmapErrorEnum is export <
  COGL_BITMAP_ERROR_FAILED
  COGL_BITMAP_ ERROR_UNKNOWN_TYPE
  COGL_BITMAP_ERROR_CORRUPT_IMAGE
>;

constant CoglBlendStringError is export := guint32;
our enum CoglBlendStringErrorEnum is export <
  COGL_BLEND_STRING_ERROR_PARSE_ERROR
  COGL_BLEND_STRING_ERROR_ARGUMENT_PARSE_ERROR
  COGL_BLEND_STRING_ERROR_INVALID_ERROR
  COGL_BLEND_STRING_ERROR_GPU_UNSUPPORTED_ERROR
>;

constant CoglBufferAccess is export := guint32;
our enum CoglBufferAccessEnum is export (
 COGL_BUFFER_ACCESS_READ       => 1,
 COGL_BUFFER_ACCESS_WRITE      => 2,
 COGL_BUFFER_ACCESS_READ_WRITE => 1 +| 2
);

constant CoglBufferError is export := guint32;
our enum CoglBufferErrorEnum is export <
  COGL_BUFFER_ERROR_MAP
>;

constant CoglBufferMapHint is export := guint32;
our enum CoglBufferMapHintEnum is export (
  COGL_BUFFER_MAP_HINT_DISCARD       => 1 +< 0,
  COGL_BUFFER_MAP_HINT_DISCARD_RANGE => 1 +< 1,
);

constant CoglBufferUpdateHint is export := guint32;
our enum CoglBufferUpdateHintEnum is export <
  COGL_BUFFER_UPDATE_HINT_STATIC
  COGL_BUFFER_UPDATE_HINT_DYNAMIC
  COGL_BUFFER_UPDATE_HINT_STREAM
>;

constant CoglDepthTestFunction is export := guint32;
our enum CoglDepthTestFunctionEnum is export (
  COGL_DEPTH_TEST_FUNCTION_NEVER    =>  0x0200,
  COGL_DEPTH_TEST_FUNCTION_LESS     =>  0x0201,
  COGL_DEPTH_TEST_FUNCTION_EQUAL    =>  0x0202,
  COGL_DEPTH_TEST_FUNCTION_LEQUAL   =>  0x0203,
  COGL_DEPTH_TEST_FUNCTION_GREATER  =>  0x0204,
  COGL_DEPTH_TEST_FUNCTION_NOTEQUAL =>  0x0205,
  COGL_DEPTH_TEST_FUNCTION_GEQUAL   =>  0x0206,
  COGL_DEPTH_TEST_FUNCTION_ALWAYS   =>  0x0207,
);

constant CoglFeatureID is export := guint32;
our enum CoglFeatureIDEnum is export (
  COGL_FEATURE_ID_TEXTURE_NPOT_BASIC => 1,
  'COGL_FEATURE_ID_TEXTURE_NPOT_MIPMAP',
  'COGL_FEATURE_ID_TEXTURE_NPOT_REPEAT',
  'COGL_FEATURE_ID_TEXTURE_NPOT',
  'COGL_FEATURE_ID_TEXTURE_RECTANGLE',
  'COGL_FEATURE_ID_TEXTURE_3D',
  'COGL_FEATURE_ID_GLSL',
  'COGL_FEATURE_ID_ARBFP',
  'COGL_FEATURE_ID_OFFSCREEN',
  'COGL_FEATURE_ID_OFFSCREEN_MULTISAMPLE',
  'COGL_FEATURE_ID_ONSCREEN_MULTIPLE',
  'COGL_FEATURE_ID_UNSIGNED_INT_INDICES',
  'COGL_FEATURE_ID_DEPTH_RANGE',
  'COGL_FEATURE_ID_POINT_SPRITE',
  'COGL_FEATURE_ID_MAP_BUFFER_FOR_READ',
  'COGL_FEATURE_ID_MAP_BUFFER_FOR_WRITE',
  'COGL_FEATURE_ID_MIRRORED_REPEAT',
  'COGL_FEATURE_ID_SWAP_BUFFERS_EVENT',
  'COGL_FEATURE_ID_GLES2_CONTEXT',
  'COGL_FEATURE_ID_DEPTH_TEXTURE',
  'COGL_FEATURE_ID_PRESENTATION_TIME',
  'COGL_FEATURE_ID_FENCE',
  'COGL_FEATURE_ID_PER_VERTEX_POINT_SIZE',
  'COGL_FEATURE_ID_TEXTURE_RG',
  'COGL_FEATURE_ID_BUFFER_AGE',
);

constant CoglFilterReturn is export := guint32;
our enum CoglFilterReturnEnum is export <
  COGL_FILTER_CONTINUE
  COGL_FILTER_REMOVE
>;

constant CoglFogMode is export := guint32;
our enum CoglFogModeEnum is export <
  COGL_FOG_MODE_LINEAR
  COGL_FOG_MODE_EXPONENTIAL
  COGL_FOG_MODE_EXPONENTIAL_SQUARED
>;

constant CoglFrameEvent is export := guint32;
our enum CoglFrameEventEnum is export (
  COGL_FRAME_EVENT_SYNC =>  1,
  'COGL_FRAME_EVENT_COMPLETE'
);

constant CoglFramebufferError is export := guint32;
our enum CoglFramebufferErrorEnum is export <
  COGL_FRAMEBUFFER_ERROR_ALLOCATE
>;

constant CoglIndicesType is export := guint32;
our enum CoglIndicesTypeEnum is export <
  COGL_INDICES_TYPE_UNSIGNED_BYTE
  COGL_INDICES_TYPE_UNSIGNED_SHORT
  COGL_INDICES_TYPE_UNSIGNED_INT
>;

constant CoglMaterialAlphaFunc is export := guint32;
our enum CoglMaterialAlphaFuncEnum is export (
  COGL_MATERIAL_ALPHA_FUNC_NEVER    =>  0x0200,
  COGL_MATERIAL_ALPHA_FUNC_LESS     =>  0x0201,
  COGL_MATERIAL_ALPHA_FUNC_EQUAL    =>  0x0202,
  COGL_MATERIAL_ALPHA_FUNC_LEQUAL   =>  0x0203,
  COGL_MATERIAL_ALPHA_FUNC_GREATER  =>  0x0204,
  COGL_MATERIAL_ALPHA_FUNC_NOTEQUAL =>  0x0205,
  COGL_MATERIAL_ALPHA_FUNC_GEQUAL   =>  0x0206,
  COGL_MATERIAL_ALPHA_FUNC_ALWAYS   =>  0x0207,
);

constant CoglMaterialFilter is export := guint32;
our enum CoglMaterialFilterEnum is export (
  COGL_MATERIAL_FILTER_NEAREST                =>  0x2600,
  COGL_MATERIAL_FILTER_LINEAR                 =>  0x2601,
  COGL_MATERIAL_FILTER_NEAREST_MIPMAP_NEAREST =>  0x2700,
  COGL_MATERIAL_FILTER_LINEAR_MIPMAP_NEAREST  =>  0x2701,
  COGL_MATERIAL_FILTER_NEAREST_MIPMAP_LINEAR  =>  0x2702,
  COGL_MATERIAL_FILTER_LINEAR_MIPMAP_LINEAR   =>  0x2703,
);

constant CoglMaterialLayerType is export := guint32;
our enum CoglMaterialLayerTypeEnum is export <
  COGL_MATERIAL_LAYER_TYPE_TEXTURE
>;

constant CoglPipelineAlphaFunc is export := guint32;
our enum CoglPipelineAlphaFuncEnum is export (
  COGL_PIPELINE_ALPHA_FUNC_NEVER    =>  0x0200,
  COGL_PIPELINE_ALPHA_FUNC_LESS     =>  0x0201,
  COGL_PIPELINE_ALPHA_FUNC_EQUAL    =>  0x0202,
  COGL_PIPELINE_ALPHA_FUNC_LEQUAL   =>  0x0203,
  COGL_PIPELINE_ALPHA_FUNC_GREATER  =>  0x0204,
  COGL_PIPELINE_ALPHA_FUNC_NOTEQUAL =>  0x0205,
  COGL_PIPELINE_ALPHA_FUNC_GEQUAL   =>  0x0206,
  COGL_PIPELINE_ALPHA_FUNC_ALWAYS   =>  0x0207,
);

constant CoglPipelineCullFaceMode is export := guint32;
our enum CoglPipelineCullFaceModeEnum is export <
  COGL_PIPELINE_CULL_FACE_MODE_NONE
  COGL_PIPELINE_CULL_FACE_MODE_FRONT
  COGL_PIPELINE_CULL_FACE_MODE_BACK
  COGL_PIPELINE_CULL_FACE_MODE_BOTH
>;

constant CoglPipelineFilter is export := guint32;
our enum CoglPipelineFilterEnum is export (
  COGL_PIPELINE_FILTER_NEAREST                =>  0x2600,
  COGL_PIPELINE_FILTER_LINEAR                 =>  0x2601,
  COGL_PIPELINE_FILTER_NEAREST_MIPMAP_NEAREST =>  0x2700,
  COGL_PIPELINE_FILTER_LINEAR_MIPMAP_NEAREST  =>  0x2701,
  COGL_PIPELINE_FILTER_NEAREST_MIPMAP_LINEAR  =>  0x2702,
  COGL_PIPELINE_FILTER_LINEAR_MIPMAP_LINEAR   =>  0x2703,
);

constant CoglPipelineWrapMode is export := guint32;
our enum CoglPipelineWrapModeEnum is export (
  COGL_PIPELINE_WRAP_MODE_REPEAT          => 0x2901,
  COGL_PIPELINE_WRAP_MODE_MIRRORED_REPEAT => 0x8370,
  COGL_PIPELINE_WRAP_MODE_CLAMP_TO_EDGE   => 0x812F,
  COGL_PIPELINE_WRAP_MODE_AUTOMATIC       => 0x0207 # GL_ALWAYS
);

constant CoglRendererError is export := guint32;
our enum CoglRendererErrorEnum is export <
  COGL_RENDERER_ERROR_XLIB_DISPLAY_OPEN
  COGL_RENDERER_ERROR_BAD_CONSTRAINT
>;

constant CoglShaderType is export := guint32;
our enum CoglShaderTypeEnum is export <
  COGL_SHADER_TYPE_VERTEX
  COGL_SHADER_TYPE_FRAGMENT
>;

constant CoglSnippetHook is export := guint32;
our enum CoglSnippetHookEnum is export (
  COGL_SNIPPET_HOOK_VERTEX                  =>  0,
  'COGL_SNIPPET_HOOK_VERTEX_TRANSFORM',
  'COGL_SNIPPET_HOOK_VERTEX_GLOBALS',
  'COGL_SNIPPET_HOOK_POINT_SIZE',
  COGL_SNIPPET_HOOK_FRAGMENT                =>  2048,
  'COGL_SNIPPET_HOOK_FRAGMENT_GLOBALS',
  COGL_SNIPPET_HOOK_TEXTURE_COORD_TRANSFORM =>  4096,
  COGL_SNIPPET_HOOK_LAYER_FRAGMENT          =>  6144,
  'COGL_SNIPPET_HOOK_TEXTURE_LOOKUP'
);

constant CoglStereoMode is export := guint32;
our enum CoglStereoModeEnum is export <
  COGL_STEREO_BOTH
  COGL_STEREO_LEFT
  COGL_STEREO_RIGHT
>;

constant CoglSubpixelOrder is export := guint32;
our enum CoglSubpixelOrderEnum is export <
  COGL_SUBPIXEL_ORDER_UNKNOWN
  COGL_SUBPIXEL_ORDER_NONE
  COGL_SUBPIXEL_ORDER_HORIZONTAL_RGB
  COGL_SUBPIXEL_ORDER_HORIZONTAL_BGR
  COGL_SUBPIXEL_ORDER_VERTICAL_RGB
  COGL_SUBPIXEL_ORDER_VERTICAL_BGR
>;

constant CoglSystemError is export := guint32;
our enum CoglSystemErrorEnum is export <
  COGL_SYSTEM_ERROR_UNSUPPORTED
  COGL_SYSTEM_ERROR_NO_MEMORY
>;

constant CoglTextureComponents is export := guint32;
our enum CoglTextureComponentsEnum is export (
  COGL_TEXTURE_COMPONENTS_A =>  1,
  'COGL_TEXTURE_COMPONENTS_RG',
  'COGL_TEXTURE_COMPONENTS_RGB',
  'COGL_TEXTURE_COMPONENTS_RGBA',
  'COGL_TEXTURE_COMPONENTS_DEPTH'
);

constant CoglTextureError is export := guint32;
our enum CoglTextureErrorEnum is export <
    COGL_TEXTURE_ERROR_SIZE
    COGL_TEXTURE_ERROR_FORMAT
    COGL_TEXTURE_ERROR_BAD_PARAMETER
    COGL_TEXTURE_ERROR_TYPE
>;

constant CoglTextureFlags is export := guint32;
our enum CoglTextureFlagsEnum is export (
  COGL_TEXTURE_NONE           =>  0,
  COGL_TEXTURE_NO_AUTO_MIPMAP =>  1 +< 0,
  COGL_TEXTURE_NO_SLICING     =>  1 +< 1,
  COGL_TEXTURE_NO_ATLAS       =>  1 +< 2,
);

constant CoglVerticesMode is export := guint32;
our enum CoglVerticesModeEnum is export (
  COGL_VERTICES_MODE_POINTS         =>  0x0000,
  COGL_VERTICES_MODE_LINES          =>  0x0001,
  COGL_VERTICES_MODE_LINE_LOOP      =>  0x0002,
  COGL_VERTICES_MODE_LINE_STRIP     =>  0x0003,
  COGL_VERTICES_MODE_TRIANGLES      =>  0x0004,
  COGL_VERTICES_MODE_TRIANGLE_STRIP =>  0x0005,
  COGL_VERTICES_MODE_TRIANGLE_FAN   =>  0x0006,
);

constant CoglWinding is export := guint32;
our enum CoglWindingEnum is export <
  COGL_WINDING_CLOCKWISE
  COGL_WINDING_COUNTER_CLOCKWISE
>;

constant CoglWinsysFeature is export := guint32;
our enum CoglWinsysFeatureEnum is export <
  COGL_WINSYS_FEATURE_MULTIPLE_ONSCREEN
  COGL_WINSYS_FEATURE_SWAP_THROTTLE
  COGL_WINSYS_FEATURE_VBLANK_COUNTER
  COGL_WINSYS_FEATURE_VBLANK_WAIT
  COGL_WINSYS_FEATURE_TEXTURE_FROM_PIXMAP
  COGL_WINSYS_FEATURE_SWAP_BUFFERS_EVENT
  COGL_WINSYS_FEATURE_SWAP_REGION
  COGL_WINSYS_FEATURE_SWAP_REGION_THROTTLE
  COGL_WINSYS_FEATURE_SWAP_REGION_SYNCHRONIZED
  COGL_WINSYS_FEATURE_BUFFER_AGE
  COGL_WINSYS_FEATURE_SYNC_AND_COMPLETE_EVENT
  COGL_WINSYS_FEATURE_N_FEATURES
>;

constant CoglWinsysID is export := guint32;
our enum CoglWinsysIDEnum is export <
  COGL_WINSYS_ID_ANY
  COGL_WINSYS_ID_STUB
  COGL_WINSYS_ID_GLX
  COGL_WINSYS_ID_EGL_XLIB
  COGL_WINSYS_ID_EGL_NULL
  COGL_WINSYS_ID_EGL_GDL
  COGL_WINSYS_ID_EGL_WAYLAND
  COGL_WINSYS_ID_EGL_KMS
  COGL_WINSYS_ID_EGL_ANDROID
  COGL_WINSYS_ID_EGL_MIR
  COGL_WINSYS_ID_WGL
  COGL_WINSYS_ID_SDL
>;

constant CoglColorBits is export := guint32;
our enum CoglColorBitsEnum (
  COGL_A_BIT       => (1 +< 4),
  COGL_BGR_BIT     => (1 +< 5),
  COGL_AFIRST_BIT  => (1 +< 6),
  COGL_PREMULT_BIT => (1 +< 7),
  COGL_DEPTH_BIT   => (1 +< 8),
  COGL_STENCIL_BIT => (1 +< 9),
);

constant CoglPixelFormat is export := guint32;
our enum CoglPixelFormatEnum is export (
  COGL_PIXEL_FORMAT_ANY           => 0,
  COGL_PIXEL_FORMAT_A_8           => 1 +| COGL_A_BIT,

  COGL_PIXEL_FORMAT_RGB_565       => 4,
  COGL_PIXEL_FORMAT_RGBA_4444     => 5 +| COGL_A_BIT,
  COGL_PIXEL_FORMAT_RGBA_5551     => 6 +| COGL_A_BIT,
  COGL_PIXEL_FORMAT_YUV           => 7,
  COGL_PIXEL_FORMAT_G_8           => 8,

  COGL_PIXEL_FORMAT_RG_88         => 9,

  COGL_PIXEL_FORMAT_RGB_888       => 2,
  COGL_PIXEL_FORMAT_BGR_888       => (2 +| COGL_BGR_BIT),

  COGL_PIXEL_FORMAT_RGBA_8888     => (3 +| COGL_A_BIT),
  COGL_PIXEL_FORMAT_BGRA_8888     => (3 +| COGL_A_BIT +| COGL_BGR_BIT),
  COGL_PIXEL_FORMAT_ARGB_8888     => (3 +| COGL_A_BIT +| COGL_AFIRST_BIT),
  COGL_PIXEL_FORMAT_ABGR_8888     => (3 +| COGL_A_BIT +| COGL_BGR_BIT +| COGL_AFIRST_BIT),

  COGL_PIXEL_FORMAT_RGBA_1010102  => (13 +| COGL_A_BIT),
  COGL_PIXEL_FORMAT_BGRA_1010102  => (13 +| COGL_A_BIT +| COGL_BGR_BIT),
  COGL_PIXEL_FORMAT_ARGB_2101010  => (13 +| COGL_A_BIT +| COGL_AFIRST_BIT),
  COGL_PIXEL_FORMAT_ABGR_2101010  => (13 +| COGL_A_BIT +| COGL_BGR_BIT +| COGL_AFIRST_BIT),

  COGL_PIXEL_FORMAT_RGBA_8888_PRE => (3 +| COGL_A_BIT +| COGL_PREMULT_BIT),
  COGL_PIXEL_FORMAT_BGRA_8888_PRE => (3 +| COGL_A_BIT +| COGL_PREMULT_BIT +| COGL_BGR_BIT),
  COGL_PIXEL_FORMAT_ARGB_8888_PRE => (3 +| COGL_A_BIT +| COGL_PREMULT_BIT +| COGL_AFIRST_BIT),
  COGL_PIXEL_FORMAT_ABGR_8888_PRE => (3 +| COGL_A_BIT +| COGL_PREMULT_BIT +| COGL_BGR_BIT +| COGL_AFIRST_BIT),
  COGL_PIXEL_FORMAT_RGBA_4444_PRE => (21 +| COGL_A_BIT +| COGL_PREMULT_BIT),
  COGL_PIXEL_FORMAT_RGBA_5551_PRE => (22 +| COGL_A_BIT +| COGL_PREMULT_BIT),

  COGL_PIXEL_FORMAT_RGBA_1010102_PRE => (29  +| COGL_PREMULT_BIT),
  COGL_PIXEL_FORMAT_BGRA_1010102_PRE => (61  +| COGL_PREMULT_BIT),
  COGL_PIXEL_FORMAT_ARGB_2101010_PRE => (93  +| COGL_PREMULT_BIT),
  COGL_PIXEL_FORMAT_ABGR_2101010_PRE => (125 +| COGL_PREMULT_BIT),

  COGL_PIXEL_FORMAT_DEPTH_16  => (9 +| COGL_DEPTH_BIT),
  COGL_PIXEL_FORMAT_DEPTH_32  => (3 +| COGL_DEPTH_BIT),

  COGL_PIXEL_FORMAT_DEPTH_24_STENCIL_8 => (3 +| COGL_DEPTH_BIT +| COGL_STENCIL_BIT)
);

constant CoglRendererConstraint is export := guint32;
our enum CoglRendererConstraintEnum is export (
  COGL_RENDERER_CONSTRAINT_USES_X11            => 1,
  COGL_RENDERER_CONSTRAINT_USES_XLIB           => 1 +< 1,
  COGL_RENDERER_CONSTRAINT_USES_EGL            => 1 +< 2,
  COGL_RENDERER_CONSTRAINT_SUPPORTS_COGL_GLES2 => 1 +< 3
);

constant CoglDriver is export := guint32;
our enum CoglDriverEnum is export <
  COGL_DRIVER_ANY
  COGL_DRIVER_NOP
  COGL_DRIVER_GL
  COGL_DRIVER_GL3
  COGL_DRIVER_GLES1
  COGL_DRIVER_GLES2
  COGL_DRIVER_WEBGL
>;

# 64 BITS!
constant CoglReadPixelFlags is export := guint64;
our enum CoglReadPixelFlagsEnum is export (
  COGL_READ_PIXELS_COLOR_BUFFER => 1
);

# 64 BITS!
constant CoglColorMask is export := guint64;
our enum CoglColorMaskEnum is export (
  COGL_COLOR_MASK_NONE  => 0,
  COGL_COLOR_MASK_RED   => 1,
  COGL_COLOR_MASK_GREEN => 1 +< 1,
  COGL_COLOR_MASK_BLUE  => 1 +< 2,
  COGL_COLOR_MASK_ALPHA => 1 +< 3,
  COGL_COLOR_MASK_ALL   => 15
);

# 64 BITS!
constant CoglBufferBit is export := guint64;
our enum CoglBufferBitEnum is export (
  COGL_BUFFER_BIT_COLOR   => 1,
  COGL_BUFFER_BIT_DEPTH   => 1 +< 1,
  COGL_BUFFER_BIT_STENCIL => 1 +< 2
);
